Node* mergeList(Node* a, Node* b)
{
    if(!a)
    return b;
    
    if(!b)
    return a;
    
    Node* result;
    
    if(a -> data <= b -> data)
    {
        result = a;
        result -> next = mergeList(a -> next, b);
    }
    
    else
    {
        result = b;
        result -> next = mergeList(a, b -> next);
    }
    
    return result;
}

void splitList(Node* head, Node* &first, Node* &second)
{
    Node* slow;
    Node* fast;
    
    first = head;
    
    if(!head || !(head -> next))
    {
        second = NULL;
        return;
    }
    
    slow = head;
    fast = head -> next;
    
    while(fast)
    {
        fast = fast -> next;
        
        if(fast)
        {
            slow = slow -> next;
            fast = fast -> next;
        }
    }
    
    second = slow -> next;
    slow -> next = NULL;
}

void sortList(Node* &head)
{
    if(!head || !(head -> next))
    return;
    
    Node* a;
    Node* b;
    
    splitList(head, a, b);
    sortList(a);
    sortList(b);
    
    head = mergeList(a, b);
}
